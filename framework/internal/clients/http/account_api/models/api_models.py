"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: {{ service_name|to_snake_case }}
    version: {{ version }}

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class BbParseMode(Enum):
    COMMON = "Common"
    INFO = "Info"
    POST = "Post"
    CHAT = "Chat"


class ChangeEmail(BaseModel):
    login: Optional[str] = Field(None, description="User login", title="Login")
    password: Optional[str] = Field(None, description="User password", title="Password")
    email: Optional[str] = Field(None, description="New user email", title="Email")


class ChangePassword(BaseModel):
    login: Optional[str] = Field(None, description="User login", title="Login")
    token: Optional[str] = Field(
        None, description="Password reset token", title="Token"
    )
    old_password: Optional[str] = Field(
        None, alias="oldPassword", description="Old password", title="Oldpassword"
    )
    new_password: Optional[str] = Field(
        None, alias="newPassword", description="New password", title="Newpassword"
    )


class ColorSchema(Enum):
    MODERN = "Modern"
    PALE = "Pale"
    CLASSIC = "Classic"
    CLASSIC_PALE = "ClassicPale"
    NIGHT = "Night"


class InfoBbText(BaseModel):
    value: Optional[str] = Field(None, description="Text", title="Value")
    parse_mode: Optional[BbParseMode] = Field(None, alias="parseMode")


class PagingSettings(BaseModel):
    posts_per_page: Optional[int] = Field(
        None,
        alias="postsPerPage",
        description="Number of posts on a game room page",
        title="Postsperpage",
    )
    comments_per_page: Optional[int] = Field(
        None,
        alias="commentsPerPage",
        description="Number of commentaries on a game or a topic page",
        title="Commentsperpage",
    )
    topics_per_page: Optional[int] = Field(
        None,
        alias="topicsPerPage",
        description="Number of detached topics on a forum page",
        title="Topicsperpage",
    )
    messages_per_page: Optional[int] = Field(
        None,
        alias="messagesPerPage",
        description="Number of private messages and conversations on dialogue page",
        title="Messagesperpage",
    )
    entities_per_page: Optional[int] = Field(
        None,
        alias="entitiesPerPage",
        description="Number of other entities on page",
        title="Entitiesperpage",
    )


class Rating(BaseModel):
    enabled: Optional[bool] = Field(
        None, description="Rating participation flag", title="Enabled"
    )
    quality: Optional[int] = Field(None, description="Quality rating", title="Quality")
    quantity: Optional[int] = Field(
        None, description="Quantity rating", title="Quantity"
    )


class ResetPassword(BaseModel):
    login: Optional[str] = Field(None, description="Login", title="Login")
    email: Optional[str] = Field(None, description="Email", title="Email")


class UserRole(Enum):
    GUEST = "Guest"
    PLAYER = "Player"
    ADMINISTRATOR = "Administrator"
    NANNY_MODERATOR = "NannyModerator"
    REGULAR_MODERATOR = "RegularModerator"
    SENIOR_MODERATOR = "SeniorModerator"


class UserSchema(BaseModel):
    name: Optional[str] = Field(None, description="User real name", title="Name")
    location: Optional[str] = Field(
        None, description="User real location", title="Location"
    )
    icq: Optional[str] = Field(None, description="User ICQ", title="Icq")
    skype: Optional[str] = Field(None, description="User Skype", title="Skype")
    info: Optional[str] = Field(None, description="User info", title="Info")
    profile_picture_url: Optional[str] = Field(
        None, description="Profile picture URL", title="Profile Picture Url"
    )
    medium_profile_picture_url: Optional[str] = Field(
        None,
        description="Medium profile picture URL",
        title="Medium Profile Picture Url",
    )
    small_profile_picture_url: Optional[str] = Field(
        None, description="Small profile picture URL", title="Small Profile Picture Url"
    )


class UserSettings(BaseModel):
    color_schema: Optional[ColorSchema] = Field(None, alias="colorSchema")
    nanny_greetings_message: Optional[str] = Field(
        None,
        alias="nannyGreetingsMessage",
        description="Message that user's newbies will receive once they are connected",
        title="Nannygreetingsmessage",
    )
    paging: Optional[PagingSettings] = None


class DeleteAccountAccountDeleteResponse200(RootModel[Any]):
    root: Any


class ConfirmationDeleteAccountAccountConfirmationDeleteDeleteResponse200(
    DeleteAccountAccountDeleteResponse200
):
    pass


class ValidationErrorLocItem(RootModel[Union[str, int]]):
    root: Union[str, int]


class User(BaseModel):
    login: Optional[str] = Field(None, description="Login", title="Login")
    roles: Optional[List[UserRole]] = Field(None, description="Roles", title="Roles")
    medium_picture_url: Optional[str] = Field(
        None,
        alias="mediumPictureUrl",
        description="Profile picture URL M-size",
        title="Mediumpictureurl",
    )
    small_picture_url: Optional[str] = Field(
        None,
        alias="smallPictureUrl",
        description="Profile picture URL S-size",
        title="Smallpictureurl",
    )
    status: Optional[str] = Field(
        None, description="User defined status", title="Status"
    )
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(
        None, description="Last seen online moment", title="Online"
    )
    name: Optional[str] = Field(None, description="User real name", title="Name")
    location: Optional[str] = Field(
        None, description="User real location", title="Location"
    )
    registration: Optional[datetime] = Field(
        None, description="User registration moment", title="Registration"
    )


class UserDetails(BaseModel):
    login: Optional[str] = Field(None, description="Login", title="Login")
    roles: Optional[List[UserRole]] = Field(None, description="Roles", title="Roles")
    medium_picture_url: Optional[str] = Field(
        None,
        alias="mediumPictureUrl",
        description="Profile picture URL M-size",
        title="Mediumpictureurl",
    )
    small_picture_url: Optional[str] = Field(
        None,
        alias="smallPictureUrl",
        description="Profile picture URL S-size",
        title="Smallpictureurl",
    )
    status: Optional[str] = Field(
        None, description="User defined status", title="Status"
    )
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(
        None, description="Last seen online moment", title="Online"
    )
    name: Optional[str] = Field(None, description="User real name", title="Name")
    location: Optional[str] = Field(
        None, description="User real location", title="Location"
    )
    registration: Optional[datetime] = Field(
        None, description="User registration moment", title="Registration"
    )
    icq: Optional[str] = Field(None, description="User ICQ number", title="Icq")
    skype: Optional[str] = Field(None, description="User Skype login", title="Skype")
    original_picture_url: Optional[str] = Field(
        None,
        alias="originalPictureUrl",
        description="URL of profile picture original",
        title="Originalpictureurl",
    )
    info: Optional[Union[InfoBbText, str]] = Field(None, title="Info")
    settings: Optional[UserSettings] = None


class UserDetailsEnvelope(BaseModel):
    resource: Optional[UserDetails] = None
    metadata: Any = Field(None, description="Additional metadata", title="Metadata")


class UserEnvelope(BaseModel):
    resource: Optional[User] = None
    metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata", title="Metadata"
    )


class ValidationError(BaseModel):
    loc: List[ValidationErrorLocItem] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")
