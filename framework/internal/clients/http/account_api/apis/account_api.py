# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: account_api
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from framework.internal.clients.http.account_api.models.api_models import (
    UserDetailsEnvelope,
    ChangeEmail,
    UserSchema,
    UserEnvelope,
    ResetPassword,
    DeleteAccountAccountDeleteResponse200,
    ChangePassword,
    ConfirmationDeleteAccountAccountConfirmationDeleteDeleteResponse200,
)


class AccountApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def get_account_info(
        self,
        token: str,
        **kwargs: Any,
    ) -> UserDetailsEnvelope:
        """
        Получить информацию о пользователе.

        Args:
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserDetailsEnvelope: ...
        """  # noqa: D205,E501

        response = self.get_account_info_with_http_info(
            token=token,
            **kwargs,
        )
        return UserDetailsEnvelope.model_validate_json(response.text)

    def get_account_info_with_http_info(
        self,
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Получить информацию о пользователе.

        Args:
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "token": str(token),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.get(
            url="/account/info",
            headers=headers,
            **kwargs,
        )
        return response

    def patch_account_info(
        self,
        user_schema: UserSchema,  # noqa: E501
        token: str,
        **kwargs: Any,
    ) -> UserDetailsEnvelope:
        """
        Изменить информацию о пользователе.

        Args:
            user_schema(UserSchema): ...
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserDetailsEnvelope: ...
        """  # noqa: D205,E501

        response = self.patch_account_info_with_http_info(
            user_schema=user_schema,  # noqa: E501
            token=token,
            **kwargs,
        )
        return UserDetailsEnvelope.model_validate_json(response.text)

    def patch_account_info_with_http_info(
        self,
        user_schema: UserSchema,  # noqa: E501
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Изменить информацию о пользователе.

        Args:
            user_schema(UserSchema): ...
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "token": str(token),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        content = user_schema.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.patch(
            url="/account/info",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def post_account_reset_password(
        self,
        reset_password: ResetPassword,  # noqa: E501
        **kwargs: Any,
    ) -> UserEnvelope:
        """
        Сбросить пароль.

        Args:
            reset_password(ResetPassword): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.post_account_reset_password_with_http_info(
            reset_password=reset_password,  # noqa: E501
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def post_account_reset_password_with_http_info(
        self,
        reset_password: ResetPassword,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Сбросить пароль.

        Args:
            reset_password(ResetPassword): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = reset_password.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/account/reset-password",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def put_account_change_password(
        self,
        change_password: ChangePassword,  # noqa: E501
        **kwargs: Any,
    ) -> UserEnvelope:
        """
        Изменить пароль.

        Args:
            change_password(ChangePassword): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.put_account_change_password_with_http_info(
            change_password=change_password,  # noqa: E501
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def put_account_change_password_with_http_info(
        self,
        change_password: ChangePassword,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Изменить пароль.

        Args:
            change_password(ChangePassword): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = change_password.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.put(
            url="/account/change-password",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def put_account_change_email(
        self,
        change_email: ChangeEmail,  # noqa: E501
        **kwargs: Any,
    ) -> UserEnvelope:
        """
        Изменить email.

        Args:
            change_email(ChangeEmail): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.put_account_change_email_with_http_info(
            change_email=change_email,  # noqa: E501
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def put_account_change_email_with_http_info(
        self,
        change_email: ChangeEmail,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Изменить email.

        Args:
            change_email(ChangeEmail): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = change_email.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.put(
            url="/account/change-email",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def delete_account(
        self,
        email: str,
        token: str,
        **kwargs: Any,
    ) -> DeleteAccountAccountDeleteResponse200:
        """
        Удалить учетную запись.

        Args:
            email(str, required): email учетной записи
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            DeleteAccountAccountDeleteResponse200: ...
        """  # noqa: D205,E501

        response = self.delete_account_with_http_info(
            email=email,
            token=token,
            **kwargs,
        )
        return DeleteAccountAccountDeleteResponse200.model_validate_json(response.text)

    def delete_account_with_http_info(
        self,
        email: str,
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Удалить учетную запись.

        Args:
            email(str, required): email учетной записи
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "email": email,
        }
        params = {k: v for k, v in params_map.items() if v}
        # process the header parameters
        headers_map = {
            "token": str(token),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.delete(
            url="/account",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def delete_account_confirmation_delete(
        self,
        delete_token: str,
        token: str,
        **kwargs: Any,
    ) -> ConfirmationDeleteAccountAccountConfirmationDeleteDeleteResponse200:
        """
        Подтвердить удаление учетной записи.

        Args:
            delete_token(str, required): Токен для подтверждения удаления учетной записи
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            ConfirmationDeleteAccountAccountConfirmationDeleteDeleteResponse200: ...
        """  # noqa: D205,E501

        response = self.delete_account_confirmation_delete_with_http_info(
            delete_token=delete_token,
            token=token,
            **kwargs,
        )
        return ConfirmationDeleteAccountAccountConfirmationDeleteDeleteResponse200.model_validate_json(
            response.text
        )

    def delete_account_confirmation_delete_with_http_info(
        self,
        delete_token: str,
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Подтвердить удаление учетной записи.

        Args:
            delete_token(str, required): Токен для подтверждения удаления учетной записи
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "delete_token": delete_token,
        }
        params = {k: v for k, v in params_map.items() if v}
        # process the header parameters
        headers_map = {
            "token": str(token),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.delete(
            url="/account/confirmation-delete",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response
