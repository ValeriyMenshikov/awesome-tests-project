# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: users_api
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from framework.internal.clients.http.users_api.models.api_models import (
    UsersSchema,
)


class UserApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def get_users_users(
        self,
        limit: int,
        offset: int,
        **kwargs: Any,
    ) -> UsersSchema:
        """
        Получить список пользователей.

        Args:
            limit(int, optional): ...
            offset(int, optional): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UsersSchema: ...
        """  # noqa: D205,E501

        response = self.get_users_users_with_http_info(
            limit=limit,
            offset=offset,
            **kwargs,
        )
        return UsersSchema.model_validate_json(response.text)

    def get_users_users_with_http_info(
        self,
        limit: int,
        offset: int,
        **kwargs: Any,
    ) -> Response:
        """
        Получить список пользователей.

        Args:
            limit(int, optional): ...
            offset(int, optional): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "limit": limit,
            "offset": offset,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/users/users",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def get_users_users_search(
        self,
        search: str,
        limit: int,
        offset: int,
        **kwargs: Any,
    ) -> UsersSchema:
        """
        Поиск пользователей.

        Args:
            search(str, required): ...
            limit(int, optional): ...
            offset(int, optional): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UsersSchema: ...
        """  # noqa: D205,E501

        response = self.get_users_users_search_with_http_info(
            search=search,
            limit=limit,
            offset=offset,
            **kwargs,
        )
        return UsersSchema.model_validate_json(response.text)

    def get_users_users_search_with_http_info(
        self,
        search: str,
        limit: int,
        offset: int,
        **kwargs: Any,
    ) -> Response:
        """
        Поиск пользователей.

        Args:
            search(str, required): ...
            limit(int, optional): ...
            offset(int, optional): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "search": search,
            "limit": limit,
            "offset": offset,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/users/users/search",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response
