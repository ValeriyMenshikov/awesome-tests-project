# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: mail_api
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from framework.internal.clients.http.mail_api.models.api_models import (
    Item,
    Messages,
    DeleteMessageMailMessageMessageIdDeleteResponse200,
    DeleteMessagesMailMessagesDeleteResponse200,
)


class MailApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def get_mail_messages(
        self,
        limit: int,
        **kwargs: Any,
    ) -> Messages:
        """
        Get Messages.

        Args:
            limit(int, optional): Количество необходимых записей
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Messages: ...
        """  # noqa: D205,E501

        response = self.get_mail_messages_with_http_info(
            limit=limit,
            **kwargs,
        )
        return Messages.model_validate_json(response.text)

    def get_mail_messages_with_http_info(
        self,
        limit: int,
        **kwargs: Any,
    ) -> Response:
        """
        Get Messages.

        Args:
            limit(int, optional): Количество необходимых записей
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "limit": limit,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/mail/messages",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def delete_mail_messages(
        self,
        **kwargs: Any,
    ) -> DeleteMessagesMailMessagesDeleteResponse200:
        """
        Delete Messages.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            DeleteMessagesMailMessagesDeleteResponse200: ...
        """  # noqa: D205,E501

        response = self.delete_mail_messages_with_http_info(
            **kwargs,
        )
        return DeleteMessagesMailMessagesDeleteResponse200.model_validate_json(
            response.text
        )

    def delete_mail_messages_with_http_info(
        self,
        **kwargs: Any,
    ) -> Response:
        """
        Delete Messages.

        Args:
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.delete(
            url="/mail/messages",
            headers=headers,
            **kwargs,
        )
        return response

    def get_mail_search(
        self,
        limit: int,
        kind: str,
        query: str,
        start: int,
        **kwargs: Any,
    ) -> Messages:
        """
        Search.

        Args:
            limit(int, optional): Количество необходимых записей
            kind(str, optional): Тип поиска
            query(str, optional): Текст поиска
            start(int, optional): Начальная позиция поиска
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Messages: ...
        """  # noqa: D205,E501

        response = self.get_mail_search_with_http_info(
            limit=limit,
            kind=kind,
            query=query,
            start=start,
            **kwargs,
        )
        return Messages.model_validate_json(response.text)

    def get_mail_search_with_http_info(
        self,
        limit: int,
        kind: str,
        query: str,
        start: int,
        **kwargs: Any,
    ) -> Response:
        """
        Search.

        Args:
            limit(int, optional): Количество необходимых записей
            kind(str, optional): Тип поиска
            query(str, optional): Текст поиска
            start(int, optional): Начальная позиция поиска
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "limit": limit,
            "kind": kind,
            "query": query,
            "start": start,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url="/mail/search",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    def delete_mail_message_message_id(
        self,
        message_id: str,
        **kwargs: Any,
    ) -> DeleteMessageMailMessageMessageIdDeleteResponse200:
        """
        Delete Message.

        Args:
            message_id(str, required): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            DeleteMessageMailMessageMessageIdDeleteResponse200: ...
        """  # noqa: D205,E501

        response = self.delete_mail_message_message_id_with_http_info(
            message_id=message_id,
            **kwargs,
        )
        return DeleteMessageMailMessageMessageIdDeleteResponse200.model_validate_json(
            response.text
        )

    def delete_mail_message_message_id_with_http_info(
        self,
        message_id: str,
        **kwargs: Any,
    ) -> Response:
        """
        Delete Message.

        Args:
            message_id(str, required): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.delete(
            url=f"/mail/message/{message_id}",
            headers=headers,
            **kwargs,
        )
        return response

    def get_mail_message_message_id(
        self,
        message_id: str,
        **kwargs: Any,
    ) -> Item:
        """
        Get Message.

        Args:
            message_id(str, required): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Item: ...
        """  # noqa: D205,E501

        response = self.get_mail_message_message_id_with_http_info(
            message_id=message_id,
            **kwargs,
        )
        return Item.model_validate_json(response.text)

    def get_mail_message_message_id_with_http_info(
        self,
        message_id: str,
        **kwargs: Any,
    ) -> Response:
        """
        Get Message.

        Args:
            message_id(str, required): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        response = self.api_client.get(
            url=f"/mail/message/{message_id}",
            headers=headers,
            **kwargs,
        )
        return response
