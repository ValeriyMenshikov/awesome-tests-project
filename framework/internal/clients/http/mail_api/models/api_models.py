"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: {{ service_name|to_snake_case }}
    version: {{ version }}

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class From(BaseModel):
    relays: Optional[Any] = Field(None, alias="Relays", title="Relays")
    mailbox: Optional[str] = Field(None, alias="Mailbox", title="Mailbox")
    domain: Optional[str] = Field(None, alias="Domain", title="Domain")
    params: Optional[str] = Field(None, alias="Params", title="Params")


class Headers(BaseModel):
    content_type: Optional[List[str]] = Field(
        None, alias="Content-Type", title="Content-Type"
    )
    date: Optional[List[str]] = Field(None, alias="Date", title="Date")
    from_: Optional[List[str]] = Field(None, alias="From", title="From")
    mime_version: Optional[List[str]] = Field(
        None, alias="MIME-Version", title="Mime-Version"
    )
    message_id: Optional[List[str]] = Field(
        None, alias="Message-Id", title="Message-Id"
    )
    received: Optional[List[str]] = Field(None, alias="Received", title="Received")
    reply_to: Optional[List[str]] = Field(None, alias="Reply-To", title="Reply-To")
    return_path: Optional[List[str]] = Field(
        None, alias="Return-Path", title="Return-Path"
    )
    subject: Optional[List[str]] = Field(None, alias="Subject", title="Subject")
    to: Optional[List[str]] = Field(None, alias="To", title="To")


class Raw(BaseModel):
    from_: Optional[str] = Field(None, alias="From", title="From")
    to: Optional[List[str]] = Field(None, alias="To", title="To")
    data: Optional[str] = Field(None, alias="Data", title="Data")
    helo: Optional[str] = Field(None, alias="Helo", title="Helo")


ToItem = From


class DeleteMessagesMailMessagesDeleteResponse200(RootModel[Any]):
    root: Any


class DeleteMessageMailMessageMessageIdDeleteResponse200(
    DeleteMessagesMailMessagesDeleteResponse200
):
    pass


class ValidationErrorLocItem(RootModel[Union[str, int]]):
    root: Union[str, int]


class Content(BaseModel):
    headers: Optional[Headers] = Field(None, alias="Headers")
    body: Optional[str] = Field(None, alias="Body", title="Body")
    size: Optional[int] = Field(None, alias="Size", title="Size")
    mime: Optional[Any] = Field(None, alias="MIME", title="Mime")


class Item(BaseModel):
    id: Optional[str] = Field(None, alias="ID", title="Id")
    from_: Optional[From] = Field(None, alias="From")
    to: Optional[List[ToItem]] = Field(None, alias="To", title="To")
    content: Optional[Content] = Field(None, alias="Content")
    created: Optional[str] = Field(None, alias="Created", title="Created")
    mime: Optional[Any] = Field(None, alias="MIME", title="Mime")
    raw: Optional[Raw] = Field(None, alias="Raw")


class Messages(BaseModel):
    total: Optional[int] = Field(None, title="Total")
    count: Optional[int] = Field(None, title="Count")
    start: Optional[int] = Field(None, title="Start")
    items: Optional[List[Item]] = Field(None, title="Items")


class ValidationError(BaseModel):
    loc: List[ValidationErrorLocItem] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")
