# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: register_api
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from framework.internal.clients.http.register_api.models.api_models import (
    AsyncRegisterUserAsyncRegisterPostResponse201,
    UserEnvelope,
    RegisterUserRegisterPostResponse201,
    Registration,
)


class AccountApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def post_user_register(
        self,
        registration: Registration,  # noqa: E501
        **kwargs: Any,
    ) -> RegisterUserRegisterPostResponse201:
        """
        Регистрация пользователя.

        Args:
            registration(Registration): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            RegisterUserRegisterPostResponse201: ...
        """  # noqa: D205,E501

        response = self.post_user_register_with_http_info(
            registration=registration,  # noqa: E501
            **kwargs,
        )
        return RegisterUserRegisterPostResponse201.model_validate_json(response.text)

    def post_user_register_with_http_info(
        self,
        registration: Registration,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Регистрация пользователя.

        Args:
            registration(Registration): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = registration.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/user/register",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def post_user_async_register(
        self,
        registration: Registration,  # noqa: E501
        **kwargs: Any,
    ) -> AsyncRegisterUserAsyncRegisterPostResponse201:
        """
        Асинхронная регистрация пользователя.

        Args:
            registration(Registration): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            AsyncRegisterUserAsyncRegisterPostResponse201: ...
        """  # noqa: D205,E501

        response = self.post_user_async_register_with_http_info(
            registration=registration,  # noqa: E501
            **kwargs,
        )
        return AsyncRegisterUserAsyncRegisterPostResponse201.model_validate_json(
            response.text
        )

    def post_user_async_register_with_http_info(
        self,
        registration: Registration,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Асинхронная регистрация пользователя.

        Args:
            registration(Registration): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = registration.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/user/async-register",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def put_user_activate(
        self,
        token: str,
        **kwargs: Any,
    ) -> UserEnvelope:
        """
        Подтвердить регистрацию.

        Args:
            token(str, required): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.put_user_activate_with_http_info(
            token=token,
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def put_user_activate_with_http_info(
        self,
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Подтвердить регистрацию.

        Args:
            token(str, required): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "token": token,
        }
        params = {k: v for k, v in params_map.items() if v}
        headers = kwargs.pop("headers", {})

        response = self.api_client.put(
            url="/user/activate",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response
