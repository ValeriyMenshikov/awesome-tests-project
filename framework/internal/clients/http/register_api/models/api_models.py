"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: {{ service_name|to_snake_case }}
    version: {{ version }}

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class Rating(BaseModel):
    enabled: Optional[bool] = Field(
        None, description="Rating participation flag", title="Enabled"
    )
    quality: Optional[int] = Field(None, description="Quality rating", title="Quality")
    quantity: Optional[int] = Field(
        None, description="Quantity rating", title="Quantity"
    )


class Registration(BaseModel):
    login: Optional[str] = Field(None, description="Login", title="Login")
    email: Optional[str] = Field(None, description="Email", title="Email")
    password: Optional[str] = Field(None, description="Password", title="Password")


class UserRole(Enum):
    GUEST = "Guest"
    PLAYER = "Player"
    ADMINISTRATOR = "Administrator"
    NANNY_MODERATOR = "NannyModerator"
    REGULAR_MODERATOR = "RegularModerator"
    SENIOR_MODERATOR = "SeniorModerator"


class RegisterUserRegisterPostResponse201(RootModel[Any]):
    root: Any


class AsyncRegisterUserAsyncRegisterPostResponse201(
    RegisterUserRegisterPostResponse201
):
    pass


class ValidationErrorLocItem(RootModel[Union[str, int]]):
    root: Union[str, int]


class User(BaseModel):
    login: Optional[str] = Field(None, description="Login", title="Login")
    roles: Optional[List[UserRole]] = Field(None, description="Roles", title="Roles")
    medium_picture_url: Optional[str] = Field(
        None,
        alias="mediumPictureUrl",
        description="Profile picture URL M-size",
        title="Mediumpictureurl",
    )
    small_picture_url: Optional[str] = Field(
        None,
        alias="smallPictureUrl",
        description="Profile picture URL S-size",
        title="Smallpictureurl",
    )
    status: Optional[str] = Field(
        None, description="User defined status", title="Status"
    )
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(
        None, description="Last seen online moment", title="Online"
    )
    name: Optional[str] = Field(None, description="User real name", title="Name")
    location: Optional[str] = Field(
        None, description="User real location", title="Location"
    )
    registration: Optional[datetime] = Field(
        None, description="User registration moment", title="Registration"
    )


class UserEnvelope(BaseModel):
    resource: Optional[User] = None
    metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata", title="Metadata"
    )


class ValidationError(BaseModel):
    loc: List[ValidationErrorLocItem] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")
