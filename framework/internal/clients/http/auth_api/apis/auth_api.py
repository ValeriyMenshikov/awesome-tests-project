# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: auth_api
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any
from httpx import Response

from restcodegen.restclient import Client


from framework.internal.clients.http.auth_api.models.api_models import (
    LoginCredentials,
    UserEnvelope,
    LogoutAllAuthLogoutAllDeleteResponse200,
    LogoutAuthLogoutDeleteResponse200,
)


class AuthApi:
    def __init__(self, api_client: Client) -> None:
        self.api_client = api_client

    def post_auth_auth(
        self,
        login_credentials: LoginCredentials,  # noqa: E501
        **kwargs: Any,
    ) -> UserEnvelope:
        """
        Авторизация.

        Args:
            login_credentials(LoginCredentials): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            UserEnvelope: ...
        """  # noqa: D205,E501

        response = self.post_auth_auth_with_http_info(
            login_credentials=login_credentials,  # noqa: E501
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    def post_auth_auth_with_http_info(
        self,
        login_credentials: LoginCredentials,  # noqa: E501
        **kwargs: Any,
    ) -> Response:
        """
        Авторизация.

        Args:
            login_credentials(LoginCredentials): ...
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        headers = kwargs.pop("headers", {})

        content = login_credentials.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = self.api_client.post(
            url="/auth/auth",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    def delete_auth_logout(
        self,
        token: str,
        **kwargs: Any,
    ) -> LogoutAuthLogoutDeleteResponse200:
        """
        Выход.

        Args:
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            LogoutAuthLogoutDeleteResponse200: ...
        """  # noqa: D205,E501

        response = self.delete_auth_logout_with_http_info(
            token=token,
            **kwargs,
        )
        return LogoutAuthLogoutDeleteResponse200.model_validate_json(response.text)

    def delete_auth_logout_with_http_info(
        self,
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Выход.

        Args:
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "token": str(token),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.delete(
            url="/auth/logout",
            headers=headers,
            **kwargs,
        )
        return response

    def delete_auth_logout_all(
        self,
        token: str,
        **kwargs: Any,
    ) -> LogoutAllAuthLogoutAllDeleteResponse200:
        """
        Выход.

        Args:
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            LogoutAllAuthLogoutAllDeleteResponse200: ...
        """  # noqa: D205,E501

        response = self.delete_auth_logout_all_with_http_info(
            token=token,
            **kwargs,
        )
        return LogoutAllAuthLogoutAllDeleteResponse200.model_validate_json(
            response.text
        )

    def delete_auth_logout_all_with_http_info(
        self,
        token: str,
        **kwargs: Any,
    ) -> Response:
        """
        Выход.

        Args:
            token(str, required): Авторизационный токен
            **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
            Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "token": str(token),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = self.api_client.delete(
            url="/auth/logout/all",
            headers=headers,
            **kwargs,
        )
        return response
